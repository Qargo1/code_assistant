import unittest
import asyncio
from unittest.mock import patch, MagicMock, AsyncMock

from interfaces.telegram.bot_core import CodeAssistantBot
from interfaces.telegram.handlers import register_additional_handlers


class TestTelegramIntegration(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Å Telegram"""
    
    @patch('interfaces.telegram.bot_core.ApplicationBuilder')
    def setUp(self, mock_app_builder):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤ –¥–ª—è Telegram API
        self.mock_application = MagicMock()
        mock_app_builder.return_value.token.return_value.build.return_value = self.mock_application
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–∞ CodeAssistant
        self.mock_code_assistant = MagicMock()
        self.mock_code_assistant.get_context.return_value = "Mock context"
        self.mock_code_assistant.handle_command.return_value = "Mock response"
        self.mock_code_assistant.analyze_project.return_value = {
            "status": "success",
            "message": "Mock analysis complete",
            "stats": {
                "classes": 10,
                "methods": 50,
                "files": 5
            }
        }
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
        self.bot = CodeAssistantBot("mock_token", self.mock_code_assistant)
    
    def test_handler_registration(self):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
        add_handler_calls = [call[0][0].__class__.__name__ for call in self.mock_application.add_handler.call_args_list]
        
        # –û–∂–∏–¥–∞–µ–º –Ω–∞–ª–∏—á–∏–µ CommandHandler –∏ MessageHandler
        self.assertIn('CommandHandler', str(add_handler_calls))
        self.assertIn('MessageHandler', str(add_handler_calls))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        # 1 MessageHandler + 6 CommandHandler –∏–∑ _setup_handlers
        self.assertGreaterEqual(self.mock_application.add_handler.call_count, 7)
    
    @patch('interfaces.telegram.bot_core.Update')
    @patch('interfaces.telegram.bot_core.ContextTypes')
    async def test_start_command(self, mock_context_types, mock_update):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
        mock_update.effective_user.first_name = "Test User"
        mock_update.effective_user.id = 12345
        mock_update.effective_user.username = "testuser"
        mock_update.message = AsyncMock()
        
        # –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        await self.bot.start(mock_update, mock_context_types.DEFAULT_TYPE)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        mock_update.message.reply_text.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
        args, kwargs = mock_update.message.reply_text.call_args
        self.assertIn("üëã –ü—Ä–∏–≤–µ—Ç", args[0])
    
    @patch('interfaces.telegram.bot_core.Update')
    @patch('interfaces.telegram.bot_core.ContextTypes')
    async def test_help_command(self, mock_context_types, mock_update):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
        mock_update.effective_user.id = 12345
        mock_update.effective_user.username = "testuser"
        mock_update.message = AsyncMock()
        
        # –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
        await self.bot.help(mock_update, mock_context_types.DEFAULT_TYPE)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        mock_update.message.reply_text.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
        args, kwargs = mock_update.message.reply_text.call_args
        self.assertIn("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", args[0])
    
    @patch('interfaces.telegram.bot_core.Update')
    @patch('interfaces.telegram.bot_core.ContextTypes')
    async def test_search_command(self, mock_context_types, mock_update):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /search"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
        mock_update.effective_user.id = 12345
        mock_update.effective_user.username = "testuser"
        mock_update.message = AsyncMock()
        mock_context_types.DEFAULT_TYPE.args = ["test query"]
        
        # –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search
        await self.bot.handle_search(mock_update, mock_context_types.DEFAULT_TYPE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ get_context –±—ã–ª –≤—ã–∑–≤–∞–Ω
        self.mock_code_assistant.get_context.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–≤–∞ —Ä–∞–∑–∞ (–∑–∞–ø—Ä–æ—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        self.assertEqual(mock_update.message.reply_text.call_count, 2)
    
    @patch('interfaces.telegram.bot_core.queue')
    @patch('interfaces.telegram.bot_core.threading')
    @patch('interfaces.telegram.bot_core.Update')
    @patch('interfaces.telegram.bot_core.ContextTypes')
    async def test_message_handling(self, mock_context_types, mock_update, mock_threading, mock_queue):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
        mock_update.message = AsyncMock()
        mock_update.message.text = "Test question"
        mock_queue.Queue.return_value.get.return_value = "Mock answer"
        
        # –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        await self.bot.handle_message(mock_update, mock_context_types.DEFAULT_TYPE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ç–æ–∫ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω
        mock_threading.Thread.assert_called_once()
        mock_threading.Thread.return_value.start.assert_called_once()
        mock_threading.Thread.return_value.join.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–≤–∞ —Ä–∞–∑–∞ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        self.assertEqual(mock_update.message.reply_text.call_count, 2)


if __name__ == '__main__':
    unittest.main() 