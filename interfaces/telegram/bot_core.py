"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram-–±–æ—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Code Assistant.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram.
"""

import logging
import asyncio
import csv
import os
import threading
import queue
from datetime import datetime
from functools import wraps
from typing import Dict, List, Any, Optional, Tuple

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes,
    CallbackContext
)

from interfaces.telegram.keyboards import create_main_menu
from interfaces.telegram.handlers import register_additional_handlers

logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–ª—è –∫–æ–º–∞–Ω–¥ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º)
ADMIN_IDS = [12345678]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
BOT_COMMANDS = [
    ("search", "–ü–æ–∏—Å–∫ –∫–æ–¥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É"),
    ("analyze", "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"),
    ("status", "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
    ("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
    ("terminal", "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"),
    ("sql", "–í—ã–ø–æ–ª–Ω–∏—Ç—å SQL-–∑–∞–ø—Ä–æ—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
]

def restricted(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞"""
    @wraps(func)
    async def wrapper(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        return await func(self, update, context)
    return wrapper

def log_user_action(user_id: int, username: str, command: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    log_dir = "logs"
    os.makedirs(log_dir, exist_ok=True)
    log_file = os.path.join(log_dir, "user_actions.csv")
    
    file_exists = os.path.exists(log_file)
    with open(log_file, "a", newline='') as f:
        writer = csv.writer(f)
        if not file_exists:
            writer.writerow(["timestamp", "user_id", "username", "action"])
        writer.writerow([datetime.now().isoformat(), user_id, username, command])

class CodeAssistantBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Code Assistant"""
    
    def __init__(self, token: str, code_assistant=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.
        
        Args:
            token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram.
            code_assistant: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ CodeAssistant.
        """
        self.token = token
        self.code_assistant = code_assistant
        self.application = ApplicationBuilder().token(token).build()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self._setup_handlers()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        register_additional_handlers(self.application, self.code_assistant)
        
        # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}
        
        logger.info("Telegram bot initialized successfully")
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("search", self.handle_search))
        self.application.add_handler(CommandHandler("analyze", self.handle_analyze))
        self.application.add_handler(CommandHandler("status", self.handle_status))
        self.application.add_handler(CommandHandler("terminal", self.handle_terminal_command))
        self.application.add_handler(CommandHandler("sql", self.handle_sql))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.handle_message
        ))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        self.application.add_handler(CallbackQueryHandler(self.handle_button))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        log_user_action(user.id, user.username, "/start")
        
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø Code Assistant - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞.\n\n"
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –≤ –∞–Ω–∞–ª–∏–∑–µ C# –∫–æ–¥–∞, –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        keyboard = create_main_menu()
        
        await update.message.reply_text(
            welcome_text, 
            reply_markup=keyboard
        )
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user = update.effective_user
        log_user_action(user.id, user.username, "/help")
        
        help_text = (
            "üîç *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
            "‚Ä¢ /search [–∑–∞–ø—Ä–æ—Å] - –ü–æ–∏—Å–∫ –∫–æ–¥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n"
            "‚Ä¢ /analyze - –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞\n"
            "‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "*–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ terminal:[–∫–æ–º–∞–Ω–¥–∞] - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ\n"
            "‚Ä¢ query:[SQL] - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞\n"
            "‚Ä¢ scrape:[url] [—Å–µ–ª–µ–∫—Ç–æ—Ä] - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã\n\n"
            "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –∫–æ–¥–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å!"
        )
        
        await update.message.reply_text(help_text, parse_mode="Markdown")
    
    async def handle_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞"""
        user = update.effective_user
        query = ' '.join(context.args) if context.args else ""
        
        if not query:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.\n"
                "–ü—Ä–∏–º–µ—Ä: /search –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ User"
            )
            return
        
        log_user_action(user.id, user.username, f"/search {query}")
        await update.message.reply_text(f"üîç –ò—â—É –∫–æ–¥ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}...")
        
        try:
            if self.code_assistant:
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ CodeAssistant
                context = self.code_assistant.get_context(query)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if len(context) > 4000:
                    parts = [context[i:i+4000] for i in range(0, len(context), 4000)]
                    for i, part in enumerate(parts):
                        await update.message.reply_text(
                            f"–ß–∞—Å—Ç—å {i+1}/{len(parts)}:\n{part}"
                        )
                else:
                    await update.message.reply_text(context)
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                
        except Exception as e:
            logger.error(f"Search error: {str(e)}")
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"
            )
    
    async def handle_analyze(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        user = update.effective_user
        log_user_action(user.id, user.username, "/analyze")
        
        await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        result_queue = queue.Queue()
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_analysis():
            try:
                if self.code_assistant:
                    result = self.code_assistant.analyze_project()
                    result_queue.put(result)
                else:
                    result_queue.put({
                        "status": "error",
                        "message": "–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
                    })
            except Exception as e:
                logger.error(f"Analysis error: {str(e)}")
                result_queue.put({
                    "status": "error",
                    "message": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
                })
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=run_analysis)
        thread.start()
        thread.join()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = result_queue.get()
        if result["status"] == "success":
            await update.message.reply_text(
                f"‚úÖ {result['message']}\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –ö–ª–∞—Å—Å–æ–≤: {result['stats'].get('classes', 0)}\n"
                f"‚Ä¢ –ú–µ—Ç–æ–¥–æ–≤: {result['stats'].get('methods', 0)}\n"
                f"‚Ä¢ –§–∞–π–ª–æ–≤: {result['stats'].get('files', 0)}"
            )
        else:
            await update.message.reply_text(f"‚ùå {result['message']}")
    
    async def handle_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        user = update.effective_user
        log_user_action(user.id, user.username, "/status")
        
        if self.code_assistant:
            status = self.code_assistant.get_system_status()
            status_text = (
                f"üñ• –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n"
                f"‚Ä¢ –†–∞–∑–º–µ—Ä –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î: {status.get('vector_db_size', '–ù/–î')}\n"
                f"‚Ä¢ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {status.get('cache_size', 0) // 1024} KB\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {status.get('memory_usage', '–ù/–î')} MB\n"
                f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {status.get('uptime', 0)} –º–∏–Ω—É—Ç\n"
                f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {status.get('last_error', '–ù–µ—Ç –æ—à–∏–±–æ–∫')}"
            )
        else:
            status_text = "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞."
            
        await update.message.reply_text(status_text)
    
    @restricted
    async def handle_terminal_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /terminal –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user = update.effective_user
        command = ' '.join(context.args) if context.args else ""
        
        if not command:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n"
                "–ü—Ä–∏–º–µ—Ä: /terminal ls -la"
            )
            return
        
        log_user_action(user.id, user.username, f"/terminal {command}")
        await update.message.reply_text(f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {command}...")
        
        try:
            if self.code_assistant:
                result = self.code_assistant.terminal.run_command(command)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if len(result) > 4000:
                    # –†–∞–∑–±–∏–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
                    parts = [result[i:i+4000] for i in range(0, len(result), 4000)]
                    for i, part in enumerate(parts):
                        await update.message.reply_text(
                            f"–ß–∞—Å—Ç—å {i+1}/{len(parts)}:\n```\n{part}\n```",
                            parse_mode="Markdown"
                        )
                else:
                    await update.message.reply_text(f"```\n{result}\n```", parse_mode="Markdown")
            else:
                await update.message.reply_text("‚ö†Ô∏è –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                
        except Exception as e:
            logger.error(f"Terminal command error: {str(e)}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
    
    @restricted
    async def handle_sql(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sql –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user = update.effective_user
        query = ' '.join(context.args) if context.args else ""
        
        if not query:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å.\n"
                "–ü—Ä–∏–º–µ—Ä: /sql SELECT * FROM classes LIMIT 5"
            )
            return
        
        log_user_action(user.id, user.username, f"/sql {query}")
        await update.message.reply_text(f"üîç –í—ã–ø–æ–ª–Ω—è—é SQL-–∑–∞–ø—Ä–æ—Å: {query}...")
        
        try:
            if self.code_assistant:
                result = self.code_assistant.database.execute_query(query)
                await update.message.reply_text(f"```\n{result}\n```", parse_mode="Markdown")
            else:
                await update.message.reply_text("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                
        except Exception as e:
            logger.error(f"SQL query error: {str(e)}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message_text = update.message.text
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        log_user_action(user.id, user.username, f"message: {message_text[:20]}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ prefix:command
        if ":" in message_text:
            prefix, command = message_text.split(":", 1)
            prefix = prefix.strip().lower()
            
            if prefix == "terminal":
                # –ò–º–∏—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /terminal
                context.args = command.split()
                await self.handle_terminal_command(update, context)
                return
                
            elif prefix == "query":
                # –ò–º–∏—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /sql
                context.args = command.split()
                await self.handle_sql(update, context)
                return
                
            elif prefix == "scrape":
                await self.handle_scrape(update, message_text.split(":", 1)[1])
                return
        
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ CodeAssistant
        await update.message.reply_text("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
        
        try:
            if self.code_assistant:
                # –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                response_queue = queue.Queue()
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                def process_message():
                    try:
                        result = self.code_assistant.handle_command(message_text)
                        response_queue.put(result)
                    except Exception as e:
                        logger.error(f"Message processing error: {str(e)}")
                        response_queue.put(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                
                # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                thread = threading.Thread(target=process_message)
                thread.start()
                thread.join()
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
                response = response_queue.get()
                
                # –†–∞–∑–±–∏–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
                if len(response) > 4000:
                    parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
                    for i, part in enumerate(parts):
                        await update.message.reply_text(f"–ß–∞—Å—Ç—å {i+1}/{len(parts)}:\n{part}")
                else:
                    await update.message.reply_text(response)
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                
        except Exception as e:
            logger.error(f"Message handling error: {str(e)}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    
    async def handle_scrape(self, update: Update, command: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ URL –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
            parts = command.strip().split()
            if len(parts) < 2:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –§–æ—Ä–º–∞—Ç: scrape:URL SELECTOR"
                )
                return
                
            url = parts[0]
            selector = ' '.join(parts[1:])
            
            await update.message.reply_text(f"üåê –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å {url}...")
            
            if self.code_assistant:
                result = self.code_assistant.scraper.scrape(url, selector)
                await update.message.reply_text(f"```\n{result}\n```", parse_mode="Markdown")
            else:
                await update.message.reply_text("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                
        except Exception as e:
            logger.error(f"Scraping error: {str(e)}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    async def handle_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback_data
        data = query.data
        user = query.from_user
        
        log_user_action(user.id, user.username, f"button: {data}")
        
        if data == "search":
            await query.message.reply_text(
                "üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/search [–≤–∞—à –∑–∞–ø—Ä–æ—Å]"
            )
        elif data == "analyze":
            # –ò–º–∏—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /analyze
            await self.handle_analyze(update, context)
        elif data == "status":
            # –ò–º–∏—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /status
            await self.handle_status(update, context)
        elif data == "help":
            # –ò–º–∏—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /help
            await self.help(update, context)
        else:
            await query.message.reply_text(f"üîç –í—ã–ø–æ–ª–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ: {data}...")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting Telegram bot")
        self.application.run_polling()