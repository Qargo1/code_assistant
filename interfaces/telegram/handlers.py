"""
–ú–æ–¥—É–ª—å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram-–±–æ—Ç–∞.
"""

import logging
from typing import Dict, List, Any, Callable, Optional, Union
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, CommandHandler, MessageHandler, filters,
    CallbackQueryHandler, ConversationHandler
)

from .commands import get_help_text, get_command_help

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
AWAITING_QUERY, PROCESSING = range(2)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.
    """
    user = update.effective_user
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã. –ú–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–∞—Ö, "
        "–º–µ—Ç–æ–¥–∞—Ö –∏ –ø—Ä–∏–º–µ—Ä–∞—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤", callback_data="classes")
        ],
        [
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_markdown(welcome_text, reply_markup=reply_markup)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
    if context.args and len(context.args) > 0:
        command_name = context.args[0]
        help_text = get_command_help(command_name)
        
        if help_text:
            await update.message.reply_markdown(help_text)
        else:
            await update.message.reply_text(
                f"–ö–æ–º–∞–Ω–¥–∞ /{command_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å–ø—Ä–∞–≤–∫—É
        await update.message.reply_markdown(get_help_text())


async def handle_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ.
    """
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        stats = {
            "total_classes": 42,
            "total_methods": 156,
            "total_files": 23,
            "total_usages": 78
        }
        
        stats_text = (
            "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ:*\n\n"
            f"üìÅ –§–∞–π–ª–æ–≤: {stats['total_files']}\n"
            f"üß© –ö–ª–∞—Å—Å–æ–≤: {stats['total_classes']}\n"
            f"‚öôÔ∏è –ú–µ—Ç–æ–¥–æ–≤: {stats['total_methods']}\n"
            f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {stats['total_usages']}\n\n"
            "_–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: —Å–µ–≥–æ–¥–Ω—è_"
        )
        
        await update.message.reply_markdown(stats_text)
        
    except Exception as e:
        logger.error(f"Error in stats handler: {str(e)}")
        await update.message.reply_text(
            "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /file.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–∞—Ö –∏ –º–µ—Ç–æ–¥–∞—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ.
    """
    if not context.args or len(context.args) == 0:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É. –ù–∞–ø—Ä–∏–º–µ—Ä: `/file path/to/file.py`"
        )
        return
    
    file_path = " ".join(context.args)
    
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
        file_info = {
            "path": file_path,
            "classes": [
                {"name": "ExampleClass", "methods": 5},
                {"name": "AnotherClass", "methods": 3}
            ],
            "total_lines": 120
        }
        
        response = (
            f"*üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:* `{file_path}`\n\n"
            f"üìè –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {file_info['total_lines']}\n"
            f"üß© –ö–ª–∞—Å—Å–æ–≤: {len(file_info['classes'])}\n\n"
            "*–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã:*\n"
        )
        
        for cls in file_info["classes"]:
            response += f"‚Ä¢ `{cls['name']}` ({cls['methods']} –º–µ—Ç–æ–¥–æ–≤)\n"
        
        response += "\n_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ_ `/methods –ò–º—è–ö–ª–∞—Å—Å–∞` _–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞_"
        
        await update.message.reply_markdown(response)
        
    except Exception as e:
        logger.error(f"Error processing file {file_path}: {str(e)}")
        await update.message.reply_text(
            f"üòî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª {file_path}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."
        )


async def handle_classes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /classes.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –∑–∞–ø—Ä–æ—Å—É.
    """
    search_query = " ".join(context.args) if context.args else None
    
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        classes = [
            {"name": "FileManager", "file": "core/file_manager.py", "methods": 8},
            {"name": "DatabaseHandler", "file": "core/db/handler.py", "methods": 12},
            {"name": "ApiClient", "file": "core/api/client.py", "methods": 5},
            {"name": "Logger", "file": "utils/logging.py", "methods": 3},
            {"name": "ConfigParser", "file": "utils/config.py", "methods": 6}
        ]
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if search_query:
            filtered_classes = [
                cls for cls in classes 
                if search_query.lower() in cls["name"].lower() or search_query.lower() in cls["file"].lower()
            ]
            used_classes = filtered_classes
            has_filter = True
        else:
            used_classes = classes
            has_filter = False
        
        if not used_classes:
            await update.message.reply_text(
                f"üòî –ö–ª–∞—Å—Å—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            )
            return
        
        response = (
            f"*üß© {'–ù–∞–π–¥–µ–Ω–Ω—ã–µ' if has_filter else '–î–æ—Å—Ç—É–ø–Ω—ã–µ'} –∫–ª–∞—Å—Å—ã:*\n\n"
        )
        
        for idx, cls in enumerate(used_classes[:10], 1):
            response += f"{idx}. `{cls['name']}` - {cls['methods']} –º–µ—Ç–æ–¥–æ–≤\n"
            response += f"   üìÑ {cls['file']}\n\n"
        
        if len(used_classes) > 10:
            response += f"_...–∏ –µ—â–µ {len(used_classes) - 10} –∫–ª–∞—Å—Å–æ–≤_\n\n"
        
        response += "_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ_ `/methods –ò–º—è–ö–ª–∞—Å—Å–∞` _–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞_"
        
        await update.message.reply_markdown(response)
        
    except Exception as e:
        logger.error(f"Error in classes handler: {str(e)}")
        await update.message.reply_text(
            "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_methods(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /methods.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.
    """
    if not context.args or len(context.args) == 0:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–ª–∞—Å—Å–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: `/methods FileManager`"
        )
        return
    
    class_name = " ".join(context.args)
    
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if class_name == "FileManager":
            methods = [
                {"name": "read_file", "return_type": "str", "params": "file_path: str"},
                {"name": "write_file", "return_type": "bool", "params": "file_path: str, content: str"},
                {"name": "delete_file", "return_type": "bool", "params": "file_path: str"},
                {"name": "copy_file", "return_type": "bool", "params": "source: str, destination: str"},
                {"name": "list_directory", "return_type": "List[str]", "params": "directory: str"}
            ]
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            methods = [
                {"name": "method1", "return_type": "Any", "params": "param1: int, param2: str"},
                {"name": "method2", "return_type": "bool", "params": ""},
                {"name": "method3", "return_type": "None", "params": "data: Dict[str, Any]"}
            ]
        
        if not methods:
            await update.message.reply_text(
                f"üòî –£ –∫–ª–∞—Å—Å–∞ '{class_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤ –∏–ª–∏ –∫–ª–∞—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            )
            return
        
        response = (
            f"*‚öôÔ∏è –ú–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ `{class_name}`:*\n\n"
        )
        
        for method in methods:
            response += f"‚Ä¢ `{method['name']}({method['params']})` ‚Üí `{method['return_type']}`\n\n"
        
        response += "_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ_ `/sample –ò–º—è–ö–ª–∞—Å—Å–∞.–ò–º—è–ú–µ—Ç–æ–¥–∞` _–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è_"
        
        await update.message.reply_markdown(response)
        
    except Exception as e:
        logger.error(f"Error getting methods for class {class_name}: {str(e)}")
        await update.message.reply_text(
            f"üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ '{class_name}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞."
        )


async def handle_sample(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sample.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
    """
    if not context.args or len(context.args) == 0:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä: `/sample FileManager.read_file`"
        )
        return
    
    query = " ".join(context.args)
    
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º—É –ø–æ–∏—Å–∫—É
        examples = [
            {
                "code": "# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞\nconfig_content = file_manager.read_file('config.json')\nconfig = json.loads(config_content)",
                "file": "app/config_loader.py",
                "line": 42
            }
        ]
        
        if not examples:
            await update.message.reply_text(
                f"üòî –ü—Ä–∏–º–µ—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            )
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä
        example = examples[0]
        
        response = (
            f"*üîç –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è '{query}':*\n\n"
            f"```python\n{example['code']}\n```\n\n"
            f"üìÑ –§–∞–π–ª: `{example['file']}:{example['line']}`"
        )
        
        await update.message.reply_markdown(response)
        
    except Exception as e:
        logger.error(f"Error searching for sample with query {query}: {str(e)}")
        await update.message.reply_text(
            f"üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'."
        )


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "help":
        await query.message.reply_markdown(get_help_text())
    elif query.data == "stats":
        await handle_stats(update, context)
    elif query.data == "classes":
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Update, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        custom_update = Update(update.update_id, message=query.message)
        await handle_classes(custom_update, context)


def register_handlers(application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram –±–æ—Ç–∞.
    
    Args:
        application: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram –±–æ—Ç–∞
    """
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    register_additional_handlers(application)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(callback_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(
        filters.COMMAND, lambda u, c: u.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
    ))


def register_additional_handlers(application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram –±–æ—Ç–∞.
    
    Args:
        application: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram –±–æ—Ç–∞
    """
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º
    application.add_handler(CommandHandler("stats", handle_stats))
    application.add_handler(CommandHandler("file", handle_file))
    application.add_handler(CommandHandler("classes", handle_classes))
    application.add_handler(CommandHandler("methods", handle_methods))
    application.add_handler(CommandHandler("sample", handle_sample))