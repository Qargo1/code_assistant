"""
telegram_code_assistant.py - –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º

–ú–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç Telegram-–±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∫–æ–¥–∞ C#,
–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞, –∞ —Ç–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞
–∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é LLM.
"""

import os
import re
import time
import json
import logging
import subprocess
import asyncio
from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple
from functools import lru_cache
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç Telegram API
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ContextTypes, 
    filters
)

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM
import ollama

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from core.analysis.multilang_analyzer import MultiLanguageAnalyzer
from tools.large_csharp_analyzer import LargeCSharpAnalyzer
from utils.semantic import QdrantCodeSearch
from utils.embeddings import EmbeddingService
from utils.db_manager import CodeKnowledgeDB

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("logs/telegram_bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
OLLAMA_MODEL = "qwen2.5-coder:3b"
VECTOR_STORAGE = "qdrant_storage"
DB_PATH = "data/code_knowledge.db"
MAX_MESSAGE_LENGTH = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

class CodeAssistantBot:
    """–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º –∏ LLM"""
    
    def __init__(self, token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            token: –¢–æ–∫–µ–Ω –¥–ª—è Telegram API
        """
        self.token = token
        self.app = None
        self.chat_history = {}  # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        self.user_state = {}    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.last_active = {}   # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.db = CodeKnowledgeDB(DB_PATH)
        self.analyzer = MultiLanguageAnalyzer()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –±–æ–ª—å—à–æ–≥–æ C# –ø—Ä–æ–µ–∫—Ç–∞
        merged_file = os.environ.get('MERGED_FILE_PATH', 'C:/Users/korda/YandexDisk/steelf/SteelF/merged_code.txt')
        self.large_analyzer = None
        if os.path.exists(merged_file):
            self.large_analyzer = LargeCSharpAnalyzer(merged_file, DB_PATH)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        self.vector_search = None
        if os.path.exists(merged_file):
            self.vector_search = QdrantCodeSearch(merged_file)
            
        # –ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –±–æ—Ç
        self.commands = {
            "search": self._cmd_search,
            "analyze": self._cmd_analyze,
            "info": self._cmd_info,
            "status": self._cmd_status,
            "exec": self._cmd_exec,
            "clear": self._cmd_clear
        }
        
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = Application.builder().token(self.token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.app.add_handler(CommandHandler("start", self.cmd_start))
        self.app.add_handler(CommandHandler("help", self.cmd_help))
        self.app.add_handler(CommandHandler("search", self.cmd_search))
        self.app.add_handler(CommandHandler("analyze", self.cmd_analyze))
        self.app.add_handler(CommandHandler("info", self.cmd_info))
        self.app.add_handler(CommandHandler("status", self.cmd_status))
        self.app.add_handler(CommandHandler("exec", self.cmd_exec))
        self.app.add_handler(CommandHandler("clear", self.cmd_clear))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query (–∫–Ω–æ–ø–∫–∏)
        self.app.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await self.app.initialize()
        await self.app.start()
        await self.app.updater.start_polling()
        
        try:
            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
            while True:
                await asyncio.sleep(1)
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
                self._cleanup_inactive_users()
                
        except (KeyboardInterrupt, SystemExit):
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            await self.app.stop()
            await self.app.shutdown()
    
    def _cleanup_inactive_users(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        now = time.time()
        inactive_threshold = 3600  # 1 —á–∞—Å
        
        inactive_users = []
        for user_id, last_active in self.last_active.items():
            if now - last_active > inactive_threshold:
                inactive_users.append(user_id)
        
        for user_id in inactive_users:
            if user_id in self.chat_history:
                del self.chat_history[user_id]
            if user_id in self.user_state:
                del self.user_state[user_id]
            if user_id in self.last_active:
                del self.last_active[user_id]
    
    def _update_user_activity(self, user_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.last_active[user_id] = time.time()
    
    def _get_chat_history(self, user_id: int) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.chat_history:
            self.chat_history[user_id] = []
        return self.chat_history[user_id]
    
    def _add_to_chat_history(self, user_id: int, role: str, content: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
        if user_id not in self.chat_history:
            self.chat_history[user_id] = []
        
        history = self.chat_history[user_id]
        history.append({"role": role, "content": content})
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
        max_history = 20
        if len(history) > max_history:
            self.chat_history[user_id] = history[-max_history:]
    
    def _set_user_state(self, user_id: int, state: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_state[user_id] = state
    
    def _get_user_state(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_state:
            self.user_state[user_id] = {}
        return self.user_state[user_id]
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        self._update_user_activity(user_id)
        
        text = ("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Code Assistant!\n\n"
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–¥–æ–º C#, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "
                "–æ –∫–ª–∞—Å—Å–∞—Ö, –º–µ—Ç–æ–¥–∞—Ö –∏ —Ñ–∞–π–ª–∞—Ö.\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")
        
        await update.message.reply_text(text)
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user_id = update.effective_user.id
        self._update_user_activity(user_id)
        
        text = ("üîç *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞*:\n\n"
                "/search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –∫–æ–¥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n"
                "/analyze <—Ñ–∞–π–ª> - –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞\n"
                "/info <–∏–º—è> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Å–µ, –º–µ—Ç–æ–¥–µ –∏–ª–∏ —Ñ–∞–π–ª–µ\n"
                "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
                "/exec <–∫–æ–º–∞–Ω–¥–∞> - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã\n"
                "/clear - –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞\n\n"
                
                "üìù *–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è*:\n"
                "/search –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/info UserController\n"
                "/analyze Program.cs\n")
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def cmd_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
        user_id = update.effective_user.id
        self._update_user_activity(user_id)
        
        query = ' '.join(context.args) if context.args else ""
        
        if not query:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return
        
        await update.message.reply_text(f"üîç –ü–æ–∏—Å–∫: '{query}'...")
        
        try:
            if self.vector_search:
                results = self.vector_search.search_code(query, top_k=3)
                
                if not results:
                    await update.message.reply_text("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    return
                
                # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                for i, result in enumerate(results):
                    text = f"*–†–µ–∑—É–ª—å—Ç–∞—Ç #{i+1}*\n"
                    text += f"üìÑ *–§–∞–π–ª*: `{result.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`\n"
                    text += f"üíª *–ö–æ–¥*:\n```\n{result.get('text', '')[:1000]}...\n```"
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if len(text) > MAX_MESSAGE_LENGTH:
                        text = text[:MAX_MESSAGE_LENGTH-100] + "...\n```"
                    
                    await update.message.reply_text(text, parse_mode='Markdown')
            else:
                await update.message.reply_text("‚ùå –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
    
    async def cmd_analyze(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze"""
        user_id = update.effective_user.id
        self._update_user_activity(user_id)
        
        file_path = ' '.join(context.args) if context.args else ""
        
        if not file_path:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return
        
        await update.message.reply_text(f"üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: '{file_path}'...")
        
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞
            if self.large_analyzer:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                info = self.large_analyzer.get_file_info(file_path)
                
                if not info or "error" in info:
                    await update.message.reply_text(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    return
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                text = f"üìä *–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞*: `{file_path}`\n\n"
                text += f"üìÅ *–Ø–∑—ã–∫*: {info.get('language', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                text += f"üìè *–°—Ç—Ä–æ–∫ –∫–æ–¥–∞*: {info.get('loc', 0)}\n"
                text += f"üî∂ *–ö–ª–∞—Å—Å—ã*: {', '.join(info.get('classes', []))}\n"
                text += f"üî∑ *–ú–µ—Ç–æ–¥—ã*: {', '.join(info.get('methods', []))}\n"
                
                await update.message.reply_text(text, parse_mode='Markdown')
            else:
                await update.message.reply_text("‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
    
    async def cmd_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info"""
        user_id = update.effective_user.id
        self._update_user_activity(user_id)
        
        name = ' '.join(context.args) if context.args else ""
        
        if not name:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–ª–∞—Å—Å–∞, –º–µ—Ç–æ–¥–∞ –∏–ª–∏ —Ñ–∞–π–ª–∞.")
            return
        
        await update.message.reply_text(f"üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: '{name}'...")
        
        try:
            if self.large_analyzer:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–ª–∞—Å—Å
                class_info = self.large_analyzer.get_class_info(name)
                
                if class_info and "error" not in class_info:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞—Å—Å–µ
                    text = f"üìö *–ö–ª–∞—Å—Å*: `{name}`\n\n"
                    text += f"üìÅ *–§–∞–π–ª*: {class_info.get('file_path', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    text += f"üî∑ *–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω*: {class_info.get('namespace', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    text += f"üî∏ *–ú–µ—Ç–æ–¥—ã*: {', '.join(class_info.get('methods', []))}\n"
                    
                    await update.message.reply_text(text, parse_mode='Markdown')
                    return
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –º–µ—Ç–æ–¥
                method_info = self.large_analyzer.get_method_info(name)
                
                if method_info and "error" not in method_info:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ç–æ–¥–µ
                    text = f"üîß *–ú–µ—Ç–æ–¥*: `{name}`\n\n"
                    text += f"üìö *–ö–ª–∞—Å—Å*: {method_info.get('class_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    text += f"üìÅ *–§–∞–π–ª*: {method_info.get('file_path', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    
                    await update.message.reply_text(text, parse_mode='Markdown')
                    return
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª
                file_info = self.large_analyzer.get_file_info(name)
                
                if file_info and "error" not in file_info:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
                    text = f"üìÑ *–§–∞–π–ª*: `{name}`\n\n"
                    text += f"üìÅ *–Ø–∑—ã–∫*: {file_info.get('language', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    text += f"üìè *–°—Ç—Ä–æ–∫ –∫–æ–¥–∞*: {file_info.get('loc', 0)}\n"
                    text += f"üî∂ *–ö–ª–∞—Å—Å—ã*: {', '.join(file_info.get('classes', []))}\n"
                    
                    await update.message.reply_text(text, parse_mode='Markdown')
                    return
                
                await update.message.reply_text(f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: '{name}'")
            else:
                await update.message.reply_text("‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
    
    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = update.effective_user.id
        self._update_user_activity(user_id)
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
            status = {}
            
            # –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            try:
                db_stats = self.db.get_stats() if self.db else None
                status["database"] = db_stats or {"status": "not_initialized"}
            except Exception as e:
                status["database"] = {"status": "error", "message": str(e)}
            
            # –°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            try:
                analyzer_ready = self.large_analyzer is not None
                status["analyzer"] = {"status": "ready" if analyzer_ready else "not_initialized"}
            except Exception as e:
                status["analyzer"] = {"status": "error", "message": str(e)}
            
            # –°—Ç–∞—Ç—É—Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            try:
                vector_ready = self.vector_search is not None
                status["vector_search"] = {"status": "ready" if vector_ready else "not_initialized"}
            except Exception as e:
                status["vector_search"] = {"status": "error", "message": str(e)}
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            text = "üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*\n\n"
            
            # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            db_status = status.get("database", {})
            text += "üìÅ *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö*: "
            if db_status.get("status") == "error":
                text += f"‚ùå –û—à–∏–±–∫–∞: {db_status.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
            elif db_status.get("status") == "not_initialized":
                text += "‚ö†Ô∏è –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n"
            else:
                text += "‚úÖ –ì–æ—Ç–æ–≤–∞\n"
                text += f"  üìä –§–∞–π–ª—ã: {db_status.get('files', 0)}\n"
                text += f"  üìä –ö–ª–∞—Å—Å—ã: {db_status.get('classes', 0)}\n"
                text += f"  üìä –ú–µ—Ç–æ–¥—ã: {db_status.get('methods', 0)}\n"
            
            # –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            analyzer_status = status.get("analyzer", {})
            text += "üîç *–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä*: "
            if analyzer_status.get("status") == "error":
                text += f"‚ùå –û—à–∏–±–∫–∞: {analyzer_status.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
            elif analyzer_status.get("status") == "not_initialized":
                text += "‚ö†Ô∏è –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
            else:
                text += "‚úÖ –ì–æ—Ç–æ–≤\n"
            
            # –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
            vector_status = status.get("vector_search", {})
            text += "üîé *–í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫*: "
            if vector_status.get("status") == "error":
                text += f"‚ùå –û—à–∏–±–∫–∞: {vector_status.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
            elif vector_status.get("status") == "not_initialized":
                text += "‚ö†Ô∏è –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
            else:
                text += "‚úÖ –ì–æ—Ç–æ–≤\n"
            
            await update.message.reply_text(text, parse_mode='Markdown')
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
    
    async def cmd_exec(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /exec"""
        user_id = update.effective_user.id
        self._update_user_activity(user_id)
        
        command = ' '.join(context.args) if context.args else ""
        
        if not command:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        forbidden_cmds = ["rm", "del", "format", "wget", "curl"]
        if any(cmd in command.lower() for cmd in forbidden_cmds):
            await update.message.reply_text("‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
            return
        
        await update.message.reply_text(f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: '{command}'...")
        
        try:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            process = subprocess.Popen(
                command,
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                stdout, stderr = process.communicate(timeout=30)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                result = ""
                if stdout:
                    result += f"üì§ *–í—ã–≤–æ–¥*:\n```\n{stdout[:1500]}```\n"
                if stderr:
                    result += f"‚ö†Ô∏è *–û—à–∏–±–∫–∏*:\n```\n{stderr[:1500]}```\n"
                
                if not result:
                    result = "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–µ–∑ –≤—ã–≤–æ–¥–∞."
                
                await update.message.reply_text(result, parse_mode='Markdown')
            
            except subprocess.TimeoutExpired:
                process.kill()
                await update.message.reply_text("‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É (30 —Å–µ–∫).")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
    
    async def cmd_clear(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear"""
        user_id = update.effective_user.id
        self._update_user_activity(user_id)
        
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        if user_id in self.chat_history:
            self.chat_history[user_id] = []
        
        await update.message.reply_text("üßπ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞.")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        self._update_user_activity(user_id)
        
        message_text = update.message.text
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        self._add_to_chat_history(user_id, "user", message_text)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
        if message_text.startswith('/'):
            command_parts = message_text[1:].split(maxsplit=1)
            command = command_parts[0].lower()
            args = command_parts[1] if len(command_parts) > 1 else ""
            
            if command in self.commands:
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                await self.commands[command](update, context, args)
                return
        
        # –ü–æ–∏—Å–∫ –∫–æ–¥–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        code_blocks = re.findall(r'```(.+?)```', message_text, re.DOTALL)
        
        if code_blocks:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ –∫–æ–¥–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –µ–≥–æ –∞–Ω–∞–ª–∏–∑
            await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞...")
            
            for code in code_blocks:
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
                language = "unknown"
                if re.search(r'class\s+\w+|namespace\s+\w+', code):
                    language = "csharp"
                elif re.search(r'public\s+class\s+\w+|import\s+java\.', code):
                    language = "java"
                elif re.search(r'function\s+\w+\s*\(|const\s+\w+\s*=', code):
                    language = "javascript"
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                temp_dir = Path("data/temp")
                temp_dir.mkdir(parents=True, exist_ok=True)
                
                timestamp = int(time.time())
                ext = ".cs" if language == "csharp" else ".java" if language == "java" else ".js"
                temp_file = temp_dir / f"temp_{timestamp}{ext}"
                
                with open(temp_file, 'w', encoding='utf-8') as f:
                    f.write(code)
                
                try:
                    # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
                    result = self.analyzer.analyze(str(temp_file))
                    
                    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    try:
                        os.remove(temp_file)
                    except:
                        pass
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    text = f"üìä *–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ ({language})*\n\n"
                    
                    if "classes" in result and result["classes"]:
                        text += f"üî∂ *–ö–ª–∞—Å—Å—ã*: {', '.join(result.get('classes', []))}\n"
                    
                    if "methods" in result and result["methods"]:
                        text += f"üî∑ *–ú–µ—Ç–æ–¥—ã*: {', '.join(result.get('methods', []))}\n"
                    
                    if language == "csharp" and "properties" in result and result["properties"]:
                        text += f"üî∏ *–°–≤–æ–π—Å—Ç–≤–∞*: {', '.join(result.get('properties', []))}\n"
                    
                    if language == "java" and "fields" in result and result["fields"]:
                        text += f"üîπ *–ü–æ–ª—è*: {', '.join(result.get('fields', []))}\n"
                    
                    if language == "javascript" and "functions" in result and result["functions"]:
                        text += f"üîª *–§—É–Ω–∫—Ü–∏–∏*: {', '.join(result.get('functions', []))}\n"
                    
                    await update.message.reply_text(text, parse_mode='Markdown')
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞: {str(e)}")
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞: {str(e)}")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–¥–æ–≤–æ–≥–æ –±–ª–æ–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ LLM
            await self._process_llm_query(update, context, message_text)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏)"""
        query = update.callback_query
        user_id = query.from_user.id
        self._update_user_activity(user_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback
        if query.data.startswith('search_'):
            # –ü–æ–∏—Å–∫ –∫–æ–¥–∞
            search_query = query.data.replace('search_', '')
            await query.answer(f"–ü–æ–∏—Å–∫: {search_query}")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.args = [search_query]
            
            # –í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞
            await self.cmd_search(update, context)
        
        elif query.data.startswith('info_'):
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ
            info_query = query.data.replace('info_', '')
            await query.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {info_query}")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.args = [info_query]
            
            # –í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã info
            await self.cmd_info(update, context)
    
    async def _process_llm_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM"""
        user_id = update.effective_user.id
        
        try:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await update.message.reply_text("ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
            history = self._get_chat_history(user_id)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è LLM
            messages = [
                {"role": "system", "content": "–í—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º C#. –û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."},
            ]
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ (–¥–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
            for message in history[-5:]:
                messages.append(message)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –∫–æ–¥–æ–º
            if self.vector_search and any(term in query.lower() for term in ['–∫–æ–¥', '–∫–ª–∞—Å—Å', '–º–µ—Ç–æ–¥', '—Ñ—É–Ω–∫—Ü–∏—è', 'c#', 'cs']):
                try:
                    # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–¥–∞
                    search_results = self.vector_search.search_code(query, top_k=1)
                    
                    if search_results:
                        context_text = f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–¥:\n```\n{search_results[0].get('text', '')}```\n"
                        messages.append({"role": "system", "content": context_text})
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {str(e)}")
            
            # –ó–∞–ø—Ä–æ—Å –∫ LLM
            response = ollama.chat(
                model=OLLAMA_MODEL,
                messages=messages
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            answer = response.get("message", {}).get("content", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            self._add_to_chat_history(user_id, "assistant", answer)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            await update.message.reply_text(answer, parse_mode='Markdown')
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            if len(answer) > 50:
                # –í—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
                keywords = re.findall(r'\b([A-Z][a-zA-Z0-9]+)\b', answer)
                keywords = list(set(keywords))[:3]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ, –Ω–µ –±–æ–ª–µ–µ 3
                
                if keywords:
                    keyboard = []
                    for keyword in keywords:
                        keyboard.append([
                            InlineKeyboardButton(f"üîç –ü–æ–∏—Å–∫: {keyword}", callback_data=f"search_{keyword}"),
                            InlineKeyboardButton(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ: {keyword}", callback_data=f"info_{keyword}")
                        ])
                    
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=reply_markup)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM: {str(e)}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
    
    async def _cmd_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE, args: str):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã search"""
        context.args = args.split()
        await self.cmd_search(update, context)
    
    async def _cmd_analyze(self, update: Update, context: ContextTypes.DEFAULT_TYPE, args: str):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã analyze"""
        context.args = args.split()
        await self.cmd_analyze(update, context)
    
    async def _cmd_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, args: str):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã info"""
        context.args = args.split()
        await self.cmd_info(update, context)
    
    async def _cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE, args: str):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã status"""
        await self.cmd_status(update, context)
    
    async def _cmd_exec(self, update: Update, context: ContextTypes.DEFAULT_TYPE, args: str):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã exec"""
        context.args = args.split()
        await self.cmd_exec(update, context)
    
    async def _cmd_clear(self, update: Update, context: ContextTypes.DEFAULT_TYPE, args: str):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã clear"""
        await self.cmd_clear(update, context)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    import argparse
    from dotenv import load_dotenv
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Telegram API
    token = os.environ.get('TELEGRAM_TOKEN')
    
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è Telegram API –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TELEGRAM_TOKEN")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = CodeAssistantBot(token)
    
    try:
        asyncio.run(bot.start_bot())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")


if __name__ == "__main__":
    main() 