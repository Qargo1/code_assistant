#### Задача
Сгенерируйте полный код для локального чат-бота, который анализирует кодовую базу объемом более 300 000 строк. Чат-бот должен быть автономным, с акцентом на автоматизацию длительных процессов, интеграцию C# и Java для обучения пользователя, и возможностью модели общаться с собой, разделяя ответы на категории: `<self>` (внутренние команды), `<user>` (ответы пользователю), `<error>` (ошибки). Основной язык — Python, так как пользователь знаком с ним, но используйте C# и Java для простых модулей, вызываемых из Python.

#### Основные требования
1. **Разбиение на подзадачи**: Разделите разработку на автономные модули, которые можно запускать и тестировать отдельно. Для каждого модуля укажите:
   - Язык программирования (Python, C#, Java).
   - Название файла и папки.
   - Уровень сложности (легкий, средний, высокий) для начинающего разработчика.
   - Возможные библиотеки и поисковые запросы для их изучения.
   - Структуру файла (классы, функции, без внутреннего кода).
   - Способ тестирования.
2. **Распределение по дням**: Распределите подзадачи на 11 дней, начиная с базовой функциональности (база данных, парсинг) и переходя к автоматизации, интеграции языков и интерфейсам.
3. **Концепции для реализации**:
   - **Двухуровневый анализ**: Фильтрация (семантический поиск с FAISS) + глубокий поиск (по ключевым словам).
   - **Мета-база знаний**: PostgreSQL для хранения метаданных (путь файла, тип семантики, зависимости, функции, дата анализа).
   - **Умные промпты**: JSON-формат для анализа и категоризации файлов.
   - **Автономное выполнение**: Планировщик задач, мониторинг изменений, интеграция с Git.
   - **Интеграция с векторной БД**: FAISS для семантического поиска.
   - **Эвристики**: Кэширование, приоритизация измененных файлов.
   - **Отчетность**: Telegram-бот для мониторинга, визуализация зависимостей.
4. **Что уже существует в дирректории**:
   - **Папка - clean_code содержит папки с файлами - изначальный c# код конвертированный в .txt с сохранением структуры папок.
   - **merged_code.txt - файл со всем кодом соедененным вместе.
   - **main_bot.py и semantic.py - файлы с уже написанным начальным кодом для ollama и qdrant

#### Инструкции
- **Языки программирования**:
  - Python: Основное ядро (база данных, поиск, интерфейсы).
  - C#: Производительные задачи, например, анализ кода с Roslyn (`bridges/csharp/`).
  - Java: Парсинг кода с JavaParser (`bridges/java/`).
- **Автоматизация**:
  - Используйте APScheduler для периодического анализа.
  - Настройте мониторинг изменений файлов с `watchdog`.
  - Интегрируйте Git через `gitpython` для анализа измененных файлов.
  - Добавьте бэкапы базы данных с `subprocess` и `pg_dump`.
- **Интеграция C# и Java**:
  - C#: Модуль для подсчета строк или анализа сложности, вызываемый через `pythonnet`.
  - Java: Модуль для поиска ключевых слов или извлечения зависимостей, вызываемый через `JPype`.
  - Задачи должны быть простыми для обучения (например, подсчет методов, парсинг классов).
- **Самообщение модели**:
  - Реализуйте JSON-формат вывода с тегами `<self>`, `<user>`, `<error>`.
  - Примеры команд `<self>`: `web_search: "query"`, `analyze_file: "path"`, `update_cache`.
  - Обработайте ошибки с `<error>` и предложите решения (например, веб-поиск при отсутствии файла).
- **Дополнительные улучшения**:
  - Визуализация зависимостей с `networkx` и Graphviz.
  - Метрики кода (цикломатическая сложность) с `radon`.
  - Параллельная обработка с `multiprocessing`.
  - Контекстная память с Redis для запоминания запросов.

#### Замечания
- Учитывайте, что пользователь — начинающий разработчик, поэтому:
  - Избегайте сложных концепций (например, сложных ML-моделей вроде CodeBERT на начальном этапе).
  - Предоставляйте комментарии в коде для объяснения логики.
  - Используйте простые библиотеки с хорошей документацией (например, `psycopg2`, `requests`).
- Кодовая база большая (300 000 строк), поэтому:
  - Оптимизируйте производительность (кэширование, инкрементальный анализ).
  - Убедитесь, что система не перегружает ресурсы (мониторинг с `psutil`).
- Автоматизация должна работать без постоянного контроля, так как пользователь не всегда дома.

#### Рекомендации
- Начинайте с базовой версии (база данных, парсинг, CLI), затем добавляйте автоматизацию и интерфейсы.
- Тестируйте каждый модуль на небольших наборах данных перед интеграцией.
- Для C# и Java начните с простых задач (подсчет строк, парсинг методов), чтобы учиться постепенно.
- Используйте предложенные поисковые запросы для изучения библиотек (например, "How to use Roslyn for C# code analysis").

#### Структура проекта
```
project/
├── analyzers/             # Парсинг и анализ кода
│   ├── setup_tree_sitter.py
│   └── universal_analyzer.py
├── automation/            # Автоматизация задач
│   ├── db_backup.py
│   ├── embedding_updater.py
│   └── file_monitor.py
├── bridges/               # Интеграция C# и Java
│   ├── csharp/Analyzer.cs
│   └── java/SearchModule.java
├── database/              # Настройка и работа с БД
│   ├── setup.py
│   └── schema.sql
├── embeddings/            # Генерация эмбеддингов
│   └── generate_embeddings.py
├── interface/             # Интерфейсы
│   ├── cli.py
│   └── telegram_bot.py
├── model/                 # Логика самообщения
│   ├── output_formatter.py
│   └── command_executor.py
├── search/                # Поисковые модули
│   ├── semantic_search.py
│   ├── keyword_deep_search.py
│   └── web_search.py
└── config/                # Конфигурации
    └── automation_config.yaml
```

#### Пример ожидаемого вывода модели
```json
{
  "self": "analyze_file: 'src/main.py'",
  "user": "Анализ файла src/main.py начат.",
  "error": null
}
```
или
```json
{
  "self": "web_search: 'best practices for Python error handling'",
  "user": "Недостаточно информации в локальной базе, выполняю поиск в интернете.",
  "error": "File not found: src/error_handler.py"
}
```

#### Действия
1. Сгенерируйте код для каждого файла в структуре проекта.
2. Для каждого файла предоставьте:
   - Полный код с комментариями.
   - Инструкции по запуску и тестированию.
3. Убедитесь, что модули работают автономно и интегрируются в общую систему.
4. Добавьте README.md с инструкциями по установке и использованию.